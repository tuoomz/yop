{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x6A926A52f60Ef35b7D259289cF5097cA3aCD9ED0",
      "txHash": "0xb135b47294ea71976f98615bab55e92fc0d4070f20b9ab96db3ed7e8ab6315e8",
      "kind": "uups"
    },
    {
      "address": "0x79ef209DACD0C1019589366A6A03aB6e0d14Be15",
      "txHash": "0xb8580e99c219d6e3b04492a2d36e94e11ddc3f7db2c70626ed21985fb0439edc",
      "kind": "uups"
    },
    {
      "address": "0xbD3dCc8357512CA786e68656bF8ABaC3C4E906F3",
      "txHash": "0x5f04177c6b6b68ae870c5a67a182b58299e7aaf694ebc9baee0d21ceea8576f2",
      "kind": "uups"
    },
    {
      "address": "0x1C56C5a308De6F9176f7378a580e4439F22Ca106",
      "txHash": "0x322684acf272a53a5d3c20298dfb9052c06dbc852115572c37151f56dc46c895",
      "kind": "uups"
    },
    {
      "address": "0x8D21A7CAeE16233356D4217F478393c87710e549",
      "txHash": "0x26c73ca13509ccd18434e202d11e82ac6c2f0935d853e07720169ec8ab30ddc5",
      "kind": "uups"
    },
    {
      "address": "0x2Ed01e80B170f7Bb18eF9A7A68fF3997Bc2430F5",
      "txHash": "0x5cc377c04ee2d368968f2a924cf6bdad1d1ef00841be772a4504e124b1ca0511",
      "kind": "uups"
    },
    {
      "address": "0x4854Bbd17EFfc0cDDaa8Cc0414F6faF619D0868a",
      "txHash": "0x5370b9443a52be89a0204082b4dd237b940fd4d3be2daf3e2b77e6f398b62e03",
      "kind": "uups"
    },
    {
      "address": "0x9E51b7B6EC752c6870Dee9ba91c43bAf20A01995",
      "txHash": "0x4f11cd0039868f4af2fb17313fca13bada9f34e9049e669721c3903905ee11ce",
      "kind": "uups"
    },
    {
      "address": "0x2838E97705A6dd726059a8ceB329DD237e398D76",
      "txHash": "0xc810aebba369ba415f2a557d85a53494955b2b56a391a31c15f6ac49b921c32e",
      "kind": "uups"
    },
    {
      "address": "0x1C85B9a04bA0FA4A39e2Ea074C2cFb2791fCE3a9",
      "txHash": "0x807cdacca59256bc1056ce8e220c525baacc4480e8a8b882148d5a8e528c07ec",
      "kind": "uups"
    },
    {
      "address": "0x89AEA1Be77F4027c982bA58223A23823f49CBf5e",
      "txHash": "0xc9c054389301b12118a957066b5c28da1d1aa9654378fba6e6e201c9bb20ae97",
      "kind": "uups"
    },
    {
      "address": "0xc8058F0991A45265Dd44cB793b473EaA1b359416",
      "txHash": "0x1ea54d7eb9f65243729995530ceaf118566744dab2aefc49cec513c63316f593",
      "kind": "uups"
    }
  ],
  "impls": {
    "e95c292bc6eba852a11eb594000f64803f19349c0851e05d0b79dd7501ebe744": {
      "address": "0x66cc8827F9F49270bb52D6C28E48e34D17500E1a",
      "txHash": "0x772a19bbfb9a017a53627694e2cc531eda54bc41f22cdb26f2845b9f0d302594",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "FeeCollection",
            "label": "vaultStrategyDataStore",
            "type": "t_address",
            "src": "contracts/fees/FeeCollection.sol:18"
          },
          {
            "contract": "FeeCollection",
            "label": "tokens",
            "type": "t_struct(AddressSet)10743_storage",
            "src": "contracts/fees/FeeCollection.sol:38"
          },
          {
            "contract": "FeeCollection",
            "label": "feesAvailableMap",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/fees/FeeCollection.sol:41"
          },
          {
            "contract": "FeeCollection",
            "label": "feesClaimedMap",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/fees/FeeCollection.sol:44"
          },
          {
            "contract": "FeeCollection",
            "label": "defaultVaultCreatorFeeRatio",
            "type": "t_uint16",
            "src": "contracts/fees/FeeCollection.sol:48"
          },
          {
            "contract": "FeeCollection",
            "label": "defaultStrategyProposerFeeRatio",
            "type": "t_uint16",
            "src": "contracts/fees/FeeCollection.sol:50"
          },
          {
            "contract": "FeeCollection",
            "label": "defaultStrategyDeveloperFeeRatio",
            "type": "t_uint16",
            "src": "contracts/fees/FeeCollection.sol:52"
          },
          {
            "contract": "FeeCollection",
            "label": "vaultCreatorFeeRatioMap",
            "type": "t_mapping(t_address,t_struct(VaultCreatorFeeRatio)12724_storage)",
            "src": "contracts/fees/FeeCollection.sol:75"
          },
          {
            "contract": "FeeCollection",
            "label": "strategyFeeRatioMap",
            "type": "t_mapping(t_address,t_struct(StrategyFeeRatio)12719_storage)",
            "src": "contracts/fees/FeeCollection.sol:76"
          },
          {
            "contract": "FeeCollection",
            "label": "protocolWallet",
            "type": "t_address",
            "src": "contracts/fees/FeeCollection.sol:79"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_struct(AddressSet)10743_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)10442_storage"
              }
            ]
          },
          "t_struct(Set)10442_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_address,t_struct(VaultCreatorFeeRatio)12724_storage)": {
            "label": "mapping(address => struct FeeCollection.VaultCreatorFeeRatio)"
          },
          "t_struct(VaultCreatorFeeRatio)12724_storage": {
            "label": "struct FeeCollection.VaultCreatorFeeRatio",
            "members": [
              {
                "label": "ratio",
                "type": "t_uint16"
              },
              {
                "label": "isSet",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(StrategyFeeRatio)12719_storage)": {
            "label": "mapping(address => struct FeeCollection.StrategyFeeRatio)"
          },
          "t_struct(StrategyFeeRatio)12719_storage": {
            "label": "struct FeeCollection.StrategyFeeRatio",
            "members": [
              {
                "label": "proposerRatio",
                "type": "t_uint16"
              },
              {
                "label": "developerRatio",
                "type": "t_uint16"
              },
              {
                "label": "isSet",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e3d73824aac1c9c4b0faf455dd245ed114b5d91bf96fd78027380ebb07898e21": {
      "address": "0xb6751867caf8CD548694233d0217d98A773a30bd",
      "txHash": "0x29e05794272b23479d33087126e0c08f0255336b2f8a5a1651282a163efc8c92",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultsRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:82"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:84"
          },
          {
            "contract": "YOPRewards",
            "label": "totalWeightForVaults",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:86"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionStartTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:88"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionEndTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:90"
          },
          {
            "contract": "YOPRewards",
            "label": "yopContractAddress",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:92"
          },
          {
            "contract": "YOPRewards",
            "label": "rewardsWallet",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:94"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingContract",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:96"
          },
          {
            "contract": "YOPRewards",
            "label": "perVaultRewardsWeight",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/rewards/YOPRewards.sol:100"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultAddresses",
            "type": "t_struct(AddressSet)4934_storage",
            "src": "contracts/rewards/YOPRewards.sol:102"
          },
          {
            "contract": "YOPRewards",
            "label": "poolRewardsState",
            "type": "t_mapping(t_address,t_struct(PoolRewardsState)18211_storage)",
            "src": "contracts/rewards/YOPRewards.sol:105"
          },
          {
            "contract": "YOPRewards",
            "label": "userRewardsState",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)31391_storage))",
            "src": "contracts/rewards/YOPRewards.sol:107"
          },
          {
            "contract": "YOPRewards",
            "label": "claimRecords",
            "type": "t_mapping(t_bytes32,t_struct(ClaimRecord)18216_storage)",
            "src": "contracts/rewards/YOPRewards.sol:109"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(AddressSet)4934_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4633_storage"
              }
            ]
          },
          "t_struct(Set)4633_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_struct(PoolRewardsState)18211_storage)": {
            "label": "mapping(address => struct YOPRewards.PoolRewardsState)"
          },
          "t_struct(PoolRewardsState)18211_storage": {
            "label": "struct YOPRewards.PoolRewardsState",
            "members": [
              {
                "label": "index",
                "type": "t_struct(UD60x18)31391_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              },
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(UD60x18)31391_storage": {
            "label": "struct PRBMath.UD60x18",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)31391_storage))": {
            "label": "mapping(address => mapping(bytes32 => struct PRBMath.UD60x18))"
          },
          "t_mapping(t_bytes32,t_struct(UD60x18)31391_storage)": {
            "label": "mapping(bytes32 => struct PRBMath.UD60x18)"
          },
          "t_mapping(t_bytes32,t_struct(ClaimRecord)18216_storage)": {
            "label": "mapping(bytes32 => struct YOPRewards.ClaimRecord)"
          },
          "t_struct(ClaimRecord)18216_storage": {
            "label": "struct YOPRewards.ClaimRecord",
            "members": [
              {
                "label": "totalAvailable",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f86a7f94e952a329c137b67e705467cb8e3e92af40b0535ebad042b81a96504e": {
      "address": "0x50166a82B2C75EC51D0631BC5a178e9b2B39c669",
      "txHash": "0x6483bdf802f314e8c04230d9c32045b31cbfb201b03398946195729dcdbb376a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:55"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:57"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:59"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:61"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:63"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:65"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)20260_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:67"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:69"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:71"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:73"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:75"
          },
          {
            "contract": "Staking",
            "label": "stakingLimit",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:77"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Stake)20260_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)20260_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "700e241fb76250f86041de02dcce3afcea83c7ea59aaef1c2f11187ca4d2df20": {
      "address": "0x36505725e03CE0B410C42ac96B77A73074Bd957A",
      "txHash": "0x90f1b055c7322f87f37ebc80df4c706db709395ab7fce5af573b39d73a2c578b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)2191_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "VaultDataStorage",
            "label": "vaultDecimals",
            "type": "t_uint8",
            "src": "contracts/vaults/VaultDataStorage.sol:14"
          },
          {
            "contract": "VaultDataStorage",
            "label": "emergencyShutdown",
            "type": "t_bool",
            "src": "contracts/vaults/VaultDataStorage.sol:15"
          },
          {
            "contract": "VaultDataStorage",
            "label": "activation",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:17"
          },
          {
            "contract": "VaultDataStorage",
            "label": "managementFee",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:18"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lockedProfitDegradation",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:22"
          },
          {
            "contract": "VaultDataStorage",
            "label": "depositLimit",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:23"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lastReport",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:25"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lockedProfit",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:27"
          },
          {
            "contract": "VaultDataStorage",
            "label": "totalDebt",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:29"
          },
          {
            "contract": "VaultDataStorage",
            "label": "feeCollection",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:31"
          },
          {
            "contract": "VaultDataStorage",
            "label": "healthCheck",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:32"
          },
          {
            "contract": "VaultDataStorage",
            "label": "strategyDataStore",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:33"
          },
          {
            "contract": "VaultDataStorage",
            "label": "accessManager",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:34"
          },
          {
            "contract": "VaultDataStorage",
            "label": "creator",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:35"
          },
          {
            "contract": "VaultDataStorage",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1414",
            "src": "contracts/vaults/VaultDataStorage.sol:37"
          },
          {
            "contract": "VaultDataStorage",
            "label": "strategies",
            "type": "t_mapping(t_address,t_struct(StrategyInfo)5081_storage)",
            "src": "contracts/vaults/VaultDataStorage.sol:38"
          },
          {
            "contract": "VaultDataStorage",
            "label": "vaultRewards",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:41"
          },
          {
            "contract": "VaultDataStorage",
            "label": "dt",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vaults/VaultDataStorage.sol:44"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)1414": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_struct(StrategyInfo)5081_storage)": {
            "label": "mapping(address => struct StrategyInfo)"
          },
          "t_struct(StrategyInfo)5081_storage": {
            "label": "struct StrategyInfo",
            "members": [
              {
                "label": "activation",
                "type": "t_uint256"
              },
              {
                "label": "lastReport",
                "type": "t_uint256"
              },
              {
                "label": "totalDebt",
                "type": "t_uint256"
              },
              {
                "label": "totalGain",
                "type": "t_uint256"
              },
              {
                "label": "totalLoss",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_struct(Counter)2191_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)2191_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "7d94ad2b092b4596bc8be352b5dfd9c1426ce8d14d6e2e765988e324b29db178": {
      "address": "0x085b5FfF718845D880D318B99380aa51719fa81c",
      "txHash": "0x3071453cf477525077248fadeff1d69751cf23b010a763ddc805835aacad2942",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:55"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:57"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:59"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:61"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:63"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:65"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)20286_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:67"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:69"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:71"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:73"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:75"
          },
          {
            "contract": "Staking",
            "label": "stakingLimit",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:77"
          },
          {
            "contract": "StakingV1Mock",
            "label": "token",
            "type": "t_address",
            "src": "contracts/mocks/StakingV1Mock.sol:8"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Stake)20286_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)20286_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "5d57a777ae24d2205b248e51bd04b719a0d65c97a7d8fd7b74080e10ad49a6da": {
      "address": "0xC0E1df6f4DC7698731641f0763702367a23C44b0",
      "txHash": "0x3ac4bdaf7214235758b03d348cd18049dc4a85aca7c60cec2525ed9853ae1109",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:55"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:57"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:59"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:61"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:63"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:65"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)20290_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:67"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:69"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:71"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:73"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:75"
          },
          {
            "contract": "Staking",
            "label": "stakingLimit",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:77"
          },
          {
            "contract": "StakingV1Mock",
            "label": "token",
            "type": "t_address",
            "src": "contracts/mocks/StakingV1Mock.sol:8"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Stake)20290_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)20290_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "a34cdae2039164e012dc38a5b3f3dc474f5108c20672bf5ffd562be7b18ed86d": {
      "address": "0x0b2eFA6fb0E4fCE6Fc71B15C8d210D9ab2F48F48",
      "txHash": "0xe92750117f32066417f8f8dc51869f9d97b1540b5e5da10c47ae3b1091bda1ff",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:18"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultsRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:83"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:85"
          },
          {
            "contract": "YOPRewards",
            "label": "totalWeightForVaults",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:87"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionStartTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:89"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionEndTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:91"
          },
          {
            "contract": "YOPRewards",
            "label": "yopContractAddress",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:93"
          },
          {
            "contract": "YOPRewards",
            "label": "rewardsWallet",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:95"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingContract",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:97"
          },
          {
            "contract": "YOPRewards",
            "label": "perVaultRewardsWeight",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/rewards/YOPRewards.sol:101"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultAddresses",
            "type": "t_struct(AddressSet)4937_storage",
            "src": "contracts/rewards/YOPRewards.sol:103"
          },
          {
            "contract": "YOPRewards",
            "label": "poolRewardsState",
            "type": "t_mapping(t_address,t_struct(PoolRewardsState)22064_storage)",
            "src": "contracts/rewards/YOPRewards.sol:106"
          },
          {
            "contract": "YOPRewards",
            "label": "userRewardsState",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)48324_storage))",
            "src": "contracts/rewards/YOPRewards.sol:108"
          },
          {
            "contract": "YOPRewards",
            "label": "claimRecords",
            "type": "t_mapping(t_bytes32,t_struct(ClaimRecord)22069_storage)",
            "src": "contracts/rewards/YOPRewards.sol:110"
          },
          {
            "contract": "YOPRewards",
            "label": "currentEpoch",
            "type": "t_struct(EpochInfo)22150_storage",
            "src": "contracts/rewards/YOPRewards.sol:121"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(AddressSet)4937_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4636_storage"
              }
            ]
          },
          "t_struct(Set)4636_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_struct(PoolRewardsState)22064_storage)": {
            "label": "mapping(address => struct YOPRewards.PoolRewardsState)"
          },
          "t_struct(PoolRewardsState)22064_storage": {
            "label": "struct YOPRewards.PoolRewardsState",
            "members": [
              {
                "label": "index",
                "type": "t_struct(UD60x18)48324_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              },
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(UD60x18)48324_storage": {
            "label": "struct PRBMath.UD60x18",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)48324_storage))": {
            "label": "mapping(address => mapping(bytes32 => struct PRBMath.UD60x18))"
          },
          "t_mapping(t_bytes32,t_struct(UD60x18)48324_storage)": {
            "label": "mapping(bytes32 => struct PRBMath.UD60x18)"
          },
          "t_mapping(t_bytes32,t_struct(ClaimRecord)22069_storage)": {
            "label": "mapping(bytes32 => struct YOPRewards.ClaimRecord)"
          },
          "t_struct(ClaimRecord)22069_storage": {
            "label": "struct YOPRewards.ClaimRecord",
            "members": [
              {
                "label": "totalAvailable",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(EpochInfo)22150_storage": {
            "label": "struct YOPRewards.EpochInfo",
            "members": [
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "a85c1aa069034b7ad6d22e7f8a6771e9cfb1016ada321500f64643f1a85cf762": {
      "address": "0xD94dDe0f886d80a71B9B8b7f26d343f6EdD0361F",
      "txHash": "0x44e974dae72a5015014e547d9885d2a709248077d81fc14f343d5dd37ef7502f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:18"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:56"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:58"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:60"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:62"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:64"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:66"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)25671_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:68"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:70"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:72"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:74"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:76"
          },
          {
            "contract": "Staking",
            "label": "stakingLimit",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:78"
          },
          {
            "contract": "StakingV1Mock",
            "label": "token",
            "type": "t_address",
            "src": "contracts/mocks/StakingV1Mock.sol:8"
          },
          {
            "contract": "StakingV1Mock2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/mocks/StakingV1Mock2.sol:14"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_struct(Stake)25671_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)25671_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "7a411316d40a5163944e602ccd8d4e99ccfa2548a289358a5e5c5235f7eb7ea9": {
      "address": "0x5af347A75e9c82ad04F27f3E30Bb9164da77c933",
      "txHash": "0x26064b62c81ffccb3fb635f7b93c8dbed88187772c09b23c49560f32ecaa1d24",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:18"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:56"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:58"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:60"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:62"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:64"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:66"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)25656_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:68"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:70"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:72"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:74"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:76"
          },
          {
            "contract": "Staking",
            "label": "stakingLimit",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:78"
          },
          {
            "contract": "Staking",
            "label": "token",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:79"
          },
          {
            "contract": "Staking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/staking/Staking.sol:80"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(Stake)25656_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)25656_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "a01e72779fff058dd0064a8b52530c6f04ac376737b0c85bdeaccb6405bacc59": {
      "address": "0x67985e15D10d21C6cAFf34CA348491b59EB54759",
      "txHash": "0x651c75cc323f32058edc51502dcac8f8b6adbd87d2d9b5cd2040a43c1607a757",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)3495_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:18"
          },
          {
            "contract": "VaultDataStorage",
            "label": "vaultDecimals",
            "type": "t_uint8",
            "src": "contracts/vaults/VaultDataStorage.sol:15"
          },
          {
            "contract": "VaultDataStorage",
            "label": "emergencyShutdown",
            "type": "t_bool",
            "src": "contracts/vaults/VaultDataStorage.sol:16"
          },
          {
            "contract": "VaultDataStorage",
            "label": "activation",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:18"
          },
          {
            "contract": "VaultDataStorage",
            "label": "managementFee",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:19"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lockedProfitDegradation",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:23"
          },
          {
            "contract": "VaultDataStorage",
            "label": "depositLimit",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:24"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lastReport",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:26"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lockedProfit",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:28"
          },
          {
            "contract": "VaultDataStorage",
            "label": "totalDebt",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:30"
          },
          {
            "contract": "VaultDataStorage",
            "label": "feeCollection",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:32"
          },
          {
            "contract": "VaultDataStorage",
            "label": "healthCheck",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:33"
          },
          {
            "contract": "VaultDataStorage",
            "label": "strategyDataStore",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:34"
          },
          {
            "contract": "VaultDataStorage",
            "label": "accessManager",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:35"
          },
          {
            "contract": "VaultDataStorage",
            "label": "creator",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:36"
          },
          {
            "contract": "VaultDataStorage",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)2718",
            "src": "contracts/vaults/VaultDataStorage.sol:38"
          },
          {
            "contract": "VaultDataStorage",
            "label": "strategies",
            "type": "t_mapping(t_address,t_struct(StrategyInfo)14596_storage)",
            "src": "contracts/vaults/VaultDataStorage.sol:39"
          },
          {
            "contract": "VaultDataStorage",
            "label": "vaultRewards",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:42"
          },
          {
            "contract": "VaultDataStorage",
            "label": "dt",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vaults/VaultDataStorage.sol:45"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "SingleAssetVaultV2",
            "label": "boostedUserBalances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/vaults/SingleAssetVaultV2.sol:13"
          },
          {
            "contract": "SingleAssetVaultV2",
            "label": "totalBoostedBalance",
            "type": "t_uint256",
            "src": "contracts/vaults/SingleAssetVaultV2.sol:15"
          },
          {
            "contract": "SingleAssetVaultV2",
            "label": "boostFormulaWeights",
            "type": "t_struct(BoostFormulaWeights)36777_storage",
            "src": "contracts/vaults/SingleAssetVaultV2.sol:22"
          },
          {
            "contract": "SingleAssetVaultV2",
            "label": "stakingContract",
            "type": "t_address",
            "src": "contracts/vaults/SingleAssetVaultV2.sol:24"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(BoostFormulaWeights)36777_storage": {
            "label": "struct SingleAssetVaultV2.BoostFormulaWeights",
            "members": [
              {
                "label": "vaultBalanceWeight",
                "type": "t_uint128"
              },
              {
                "label": "stakingBalanceWeight",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20Upgradeable)2718": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_struct(StrategyInfo)14596_storage)": {
            "label": "mapping(address => struct StrategyInfo)"
          },
          "t_struct(StrategyInfo)14596_storage": {
            "label": "struct StrategyInfo",
            "members": [
              {
                "label": "activation",
                "type": "t_uint256"
              },
              {
                "label": "lastReport",
                "type": "t_uint256"
              },
              {
                "label": "totalDebt",
                "type": "t_uint256"
              },
              {
                "label": "totalGain",
                "type": "t_uint256"
              },
              {
                "label": "totalLoss",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(Counter)3495_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)3495_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "52cdf003cafbb43ab93dc67bdbf21f78e5ed36e504acb09503a41de4d5d7451b": {
      "address": "0x01dbBc1eE658e7AF568592CfF6EA1B0af2bD0523",
      "txHash": "0xa7a0f8af9dd06073920de1fc87ecadcda17e5935e179e0e58cca1d5807a10f64",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "YOPRegistry",
            "label": "allVaults",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/registry/YOPRegistry.sol:14"
          },
          {
            "contract": "YOPRegistry",
            "label": "vaultsForToken",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "src": "contracts/registry/YOPRegistry.sol:17"
          },
          {
            "contract": "YOPRegistry",
            "label": "tokenForVault",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/registry/YOPRegistry.sol:19"
          }
        ],
        "types": {
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "24d0f26ee99f509604c1dcb43c9703825342130da99fdd882b8147a2b9244bd3": {
      "address": "0xD07cB2de90E19F2A572665006356791106Ced50d",
      "txHash": "0x3b28ed8dcfbc0b5124cf82d1ada3d2bc83ad8d3a4ec788c9e54cb1868d89dcca",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "YOPRouter",
            "label": "stakingContract",
            "type": "t_address",
            "src": "contracts/router/YOPRouter.sol:19"
          },
          {
            "contract": "YOPRouter",
            "label": "uniswapAddress",
            "type": "t_address",
            "src": "contracts/router/YOPRouter.sol:20"
          },
          {
            "contract": "YOPRouter",
            "label": "yopAddress",
            "type": "t_address",
            "src": "contracts/router/YOPRouter.sol:21"
          },
          {
            "contract": "YOPRouter",
            "label": "wethAddress",
            "type": "t_address",
            "src": "contracts/router/YOPRouter.sol:22"
          },
          {
            "contract": "YOPRouter",
            "label": "yopRegistry",
            "type": "t_address",
            "src": "contracts/router/YOPRouter.sol:23"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "46d1e79d248239ca4f6e28728487766f3e03167adee87af9e6984d1a5e3475fc": {
      "address": "0xD162aBa727630f13A27E55e19e3E4fDCc0d9aC35",
      "txHash": "0x4cee6b09c8e0bc692d2c691d0c6e92272e6bd238ca2d44e8eaee38d5ba7e03c6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:18"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:56"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:58"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:60"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:62"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:64"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:66"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)25662_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:68"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:70"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:72"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:74"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:76"
          },
          {
            "contract": "Staking",
            "label": "stakingLimit",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:78"
          },
          {
            "contract": "Staking",
            "label": "token",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:79"
          },
          {
            "contract": "Staking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/staking/Staking.sol:80"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(Stake)25662_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)25662_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "e48f8d21700c0e6c874909ec87653feb07ee9e6cd23c707f9b44f83a9b6293d1": {
      "address": "0x5Ad5682D3f6A3cDdfDdDBCbc100fB0502dB879A7",
      "txHash": "0x345fab3b7e9f6af8cd8f5d3cb06f60b4d226947f5124aef694f571ba63a73cef",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:18"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultsRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:83"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:85"
          },
          {
            "contract": "YOPRewards",
            "label": "totalWeightForVaults",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:87"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionStartTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:89"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionEndTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:91"
          },
          {
            "contract": "YOPRewards",
            "label": "yopContractAddress",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:93"
          },
          {
            "contract": "YOPRewards",
            "label": "rewardsWallet",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:95"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingContract",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:97"
          },
          {
            "contract": "YOPRewards",
            "label": "perVaultRewardsWeight",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/rewards/YOPRewards.sol:101"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultAddresses",
            "type": "t_struct(AddressSet)4937_storage",
            "src": "contracts/rewards/YOPRewards.sol:103"
          },
          {
            "contract": "YOPRewards",
            "label": "poolRewardsState",
            "type": "t_mapping(t_address,t_struct(PoolRewardsState)22095_storage)",
            "src": "contracts/rewards/YOPRewards.sol:106"
          },
          {
            "contract": "YOPRewards",
            "label": "userRewardsState",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)48361_storage))",
            "src": "contracts/rewards/YOPRewards.sol:108"
          },
          {
            "contract": "YOPRewards",
            "label": "claimRecords",
            "type": "t_mapping(t_bytes32,t_struct(ClaimRecord)22100_storage)",
            "src": "contracts/rewards/YOPRewards.sol:110"
          },
          {
            "contract": "YOPRewards",
            "label": "currentEpoch",
            "type": "t_struct(EpochInfo)22181_storage",
            "src": "contracts/rewards/YOPRewards.sol:121"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(AddressSet)4937_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4636_storage"
              }
            ]
          },
          "t_struct(Set)4636_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_struct(PoolRewardsState)22095_storage)": {
            "label": "mapping(address => struct YOPRewards.PoolRewardsState)"
          },
          "t_struct(PoolRewardsState)22095_storage": {
            "label": "struct YOPRewards.PoolRewardsState",
            "members": [
              {
                "label": "index",
                "type": "t_struct(UD60x18)48361_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              },
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(UD60x18)48361_storage": {
            "label": "struct PRBMath.UD60x18",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)48361_storage))": {
            "label": "mapping(address => mapping(bytes32 => struct PRBMath.UD60x18))"
          },
          "t_mapping(t_bytes32,t_struct(UD60x18)48361_storage)": {
            "label": "mapping(bytes32 => struct PRBMath.UD60x18)"
          },
          "t_mapping(t_bytes32,t_struct(ClaimRecord)22100_storage)": {
            "label": "mapping(bytes32 => struct YOPRewards.ClaimRecord)"
          },
          "t_struct(ClaimRecord)22100_storage": {
            "label": "struct YOPRewards.ClaimRecord",
            "members": [
              {
                "label": "totalAvailable",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(EpochInfo)22181_storage": {
            "label": "struct YOPRewards.EpochInfo",
            "members": [
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f3c4db64e18e298ef67fdbd761703ccf5812fa0a2e555f7fa5189a530e323a36": {
      "address": "0xfC55B147dF58dee9F722e2B9c5C8f8F9C176eC2f",
      "txHash": "0x7797bc1ca70363ce3a478518ebd05aec8a7a56bf1f690efe1cf548cb95e0792f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:21"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:23"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:18"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultsRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:83"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:85"
          },
          {
            "contract": "YOPRewards",
            "label": "totalWeightForVaults",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:87"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionStartTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:89"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionEndTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:91"
          },
          {
            "contract": "YOPRewards",
            "label": "yopContractAddress",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:93"
          },
          {
            "contract": "YOPRewards",
            "label": "rewardsWallet",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:95"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingContract",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:97"
          },
          {
            "contract": "YOPRewards",
            "label": "perVaultRewardsWeight",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/rewards/YOPRewards.sol:101"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultAddresses",
            "type": "t_struct(AddressSet)4937_storage",
            "src": "contracts/rewards/YOPRewards.sol:103"
          },
          {
            "contract": "YOPRewards",
            "label": "poolRewardsState",
            "type": "t_mapping(t_address,t_struct(PoolRewardsState)22095_storage)",
            "src": "contracts/rewards/YOPRewards.sol:106"
          },
          {
            "contract": "YOPRewards",
            "label": "userRewardsState",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)48361_storage))",
            "src": "contracts/rewards/YOPRewards.sol:108"
          },
          {
            "contract": "YOPRewards",
            "label": "claimRecords",
            "type": "t_mapping(t_bytes32,t_struct(ClaimRecord)22100_storage)",
            "src": "contracts/rewards/YOPRewards.sol:110"
          },
          {
            "contract": "YOPRewards",
            "label": "currentEpoch",
            "type": "t_struct(EpochInfo)22181_storage",
            "src": "contracts/rewards/YOPRewards.sol:121"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(AddressSet)4937_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4636_storage"
              }
            ]
          },
          "t_struct(Set)4636_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_struct(PoolRewardsState)22095_storage)": {
            "label": "mapping(address => struct YOPRewards.PoolRewardsState)"
          },
          "t_struct(PoolRewardsState)22095_storage": {
            "label": "struct YOPRewards.PoolRewardsState",
            "members": [
              {
                "label": "index",
                "type": "t_struct(UD60x18)48361_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              },
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(UD60x18)48361_storage": {
            "label": "struct PRBMath.UD60x18",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)48361_storage))": {
            "label": "mapping(address => mapping(bytes32 => struct PRBMath.UD60x18))"
          },
          "t_mapping(t_bytes32,t_struct(UD60x18)48361_storage)": {
            "label": "mapping(bytes32 => struct PRBMath.UD60x18)"
          },
          "t_mapping(t_bytes32,t_struct(ClaimRecord)22100_storage)": {
            "label": "mapping(bytes32 => struct YOPRewards.ClaimRecord)"
          },
          "t_struct(ClaimRecord)22100_storage": {
            "label": "struct YOPRewards.ClaimRecord",
            "members": [
              {
                "label": "totalAvailable",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(EpochInfo)22181_storage": {
            "label": "struct YOPRewards.EpochInfo",
            "members": [
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}
