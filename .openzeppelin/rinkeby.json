{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x7b34A8998f0467C71827a7FE47b5326e677a78b3",
      "txHash": "0xad876119f810986f961195b9c02b65a7330c8b7d803bb81d7dd832be562f9582",
      "kind": "uups"
    },
    {
      "address": "0xA9fb988A75960CAae1bc55556FdD7F463A255ae0",
      "txHash": "0xec653716b60fcacefd663e0777294f76db10e2183086ccaadbb24810717cab39",
      "kind": "uups"
    },
    {
      "address": "0xeD3B3A4aC33A3861DcA995A31A161ddB9F809b68",
      "txHash": "0x141558f23733fea9e84df0fe29364856b2d8c1137e79361a053590499c4aa392",
      "kind": "uups"
    },
    {
      "address": "0xC17B83b33af998ab782E74fD271e354cf4aee2AB",
      "txHash": "0xe29fdf0236a2d98db34ea04a012013b487d7554c26c6252fe77dd5f5f632e5f3",
      "kind": "uups"
    },
    {
      "address": "0xB9249aF92B75AE9D81888b46C0Cd810112b8C2cc",
      "txHash": "0x4a919e4775cf98fd245fd7378a4a09cefc47e1961835a02d8c63b4cbb08c4c81",
      "kind": "uups"
    },
    {
      "address": "0x138667b07F6a8c22CBbdEfCd1E7Fb78307E96C9B",
      "txHash": "0x73747f6d8099f727d21f25410fdb51cfe05d34b84161d6018c70c28ffc666ede",
      "kind": "uups"
    },
    {
      "address": "0xAf3B1f91FdE4120BeD7f4209fB15aDF318A0CF50",
      "txHash": "0xd82d6dc1eeb51c21dce6cb9f25a8d2cd93de041e7598e443af48643b6369e4dc",
      "kind": "uups"
    },
    {
      "address": "0x31A324446BA6653BaFdb3757ae81D38250A13f20",
      "txHash": "0xd06d118d28cf9c913b5fddd4c1be923ca41e2a4635ad8f98daeb946580d79d58",
      "kind": "uups"
    }
  ],
  "impls": {
    "154819135be743ddbf746ea5c31156a1cdf8c3e9939d5781bdcd7e625382af22": {
      "address": "0xFcc3b24A6928D70f52d6c49C4C57C2c32f16bE1c",
      "txHash": "0x805ec3119e8ad13d76b268255527bbece4ed1db7455634db12e70ebe8d710376",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "FeeCollection",
            "label": "vaultStrategyDataStore",
            "type": "t_address",
            "src": "contracts/fees/FeeCollection.sol:19"
          },
          {
            "contract": "FeeCollection",
            "label": "tokens",
            "type": "t_struct(AddressSet)10541_storage",
            "src": "contracts/fees/FeeCollection.sol:39"
          },
          {
            "contract": "FeeCollection",
            "label": "feesAvailableMap",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/fees/FeeCollection.sol:42"
          },
          {
            "contract": "FeeCollection",
            "label": "feesClaimedMap",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/fees/FeeCollection.sol:45"
          },
          {
            "contract": "FeeCollection",
            "label": "defaultVaultCreatorFeeRatio",
            "type": "t_uint16",
            "src": "contracts/fees/FeeCollection.sol:49"
          },
          {
            "contract": "FeeCollection",
            "label": "defaultStrategyProposerFeeRatio",
            "type": "t_uint16",
            "src": "contracts/fees/FeeCollection.sol:51"
          },
          {
            "contract": "FeeCollection",
            "label": "defaultStrategyDeveloperFeeRatio",
            "type": "t_uint16",
            "src": "contracts/fees/FeeCollection.sol:53"
          },
          {
            "contract": "FeeCollection",
            "label": "vaultCreatorFeeRatioMap",
            "type": "t_mapping(t_address,t_struct(VaultCreatorFeeRatio)12557_storage)",
            "src": "contracts/fees/FeeCollection.sol:76"
          },
          {
            "contract": "FeeCollection",
            "label": "strategyFeeRatioMap",
            "type": "t_mapping(t_address,t_struct(StrategyFeeRatio)12552_storage)",
            "src": "contracts/fees/FeeCollection.sol:77"
          },
          {
            "contract": "FeeCollection",
            "label": "protocolWallet",
            "type": "t_address",
            "src": "contracts/fees/FeeCollection.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_struct(AddressSet)10541_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)10240_storage"
              }
            ]
          },
          "t_struct(Set)10240_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_address,t_struct(VaultCreatorFeeRatio)12557_storage)": {
            "label": "mapping(address => struct FeeCollection.VaultCreatorFeeRatio)"
          },
          "t_struct(VaultCreatorFeeRatio)12557_storage": {
            "label": "struct FeeCollection.VaultCreatorFeeRatio",
            "members": [
              {
                "label": "ratio",
                "type": "t_uint16"
              },
              {
                "label": "isSet",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(StrategyFeeRatio)12552_storage)": {
            "label": "mapping(address => struct FeeCollection.StrategyFeeRatio)"
          },
          "t_struct(StrategyFeeRatio)12552_storage": {
            "label": "struct FeeCollection.StrategyFeeRatio",
            "members": [
              {
                "label": "proposerRatio",
                "type": "t_uint16"
              },
              {
                "label": "developerRatio",
                "type": "t_uint16"
              },
              {
                "label": "isSet",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "80deaaa127344b893ae915ea76ba175d77a2e4acbc65e590e3760ffec9d12b4b": {
      "address": "0x41C0DE359a434655276aCaD735b4D210C4a03F4c",
      "txHash": "0x724fac027823290853f1b30a7e1eb0dbdce8bf892cd1f6591577ca4e87d74041",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultsRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:80"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingRewardsWeight",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:82"
          },
          {
            "contract": "YOPRewards",
            "label": "totalWeightForVaults",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:84"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionStartTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:86"
          },
          {
            "contract": "YOPRewards",
            "label": "emissionEndTime",
            "type": "t_uint256",
            "src": "contracts/rewards/YOPRewards.sol:88"
          },
          {
            "contract": "YOPRewards",
            "label": "yopContractAddress",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:90"
          },
          {
            "contract": "YOPRewards",
            "label": "rewardsWallet",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:92"
          },
          {
            "contract": "YOPRewards",
            "label": "stakingContract",
            "type": "t_address",
            "src": "contracts/rewards/YOPRewards.sol:94"
          },
          {
            "contract": "YOPRewards",
            "label": "perVaultRewardsWeight",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/rewards/YOPRewards.sol:98"
          },
          {
            "contract": "YOPRewards",
            "label": "vaultAddresses",
            "type": "t_struct(AddressSet)4732_storage",
            "src": "contracts/rewards/YOPRewards.sol:100"
          },
          {
            "contract": "YOPRewards",
            "label": "poolRewardsState",
            "type": "t_mapping(t_address,t_struct(PoolRewardsState)17684_storage)",
            "src": "contracts/rewards/YOPRewards.sol:103"
          },
          {
            "contract": "YOPRewards",
            "label": "userRewardsState",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)38741_storage))",
            "src": "contracts/rewards/YOPRewards.sol:105"
          },
          {
            "contract": "YOPRewards",
            "label": "claimRecords",
            "type": "t_mapping(t_bytes32,t_struct(ClaimRecord)17689_storage)",
            "src": "contracts/rewards/YOPRewards.sol:107"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(AddressSet)4732_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4431_storage"
              }
            ]
          },
          "t_struct(Set)4431_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_struct(PoolRewardsState)17684_storage)": {
            "label": "mapping(address => struct YOPRewards.PoolRewardsState)"
          },
          "t_struct(PoolRewardsState)17684_storage": {
            "label": "struct YOPRewards.PoolRewardsState",
            "members": [
              {
                "label": "index",
                "type": "t_struct(UD60x18)38741_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              },
              {
                "label": "epochCount",
                "type": "t_uint256"
              },
              {
                "label": "epochRate",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(UD60x18)38741_storage": {
            "label": "struct PRBMath.UD60x18",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_bytes32,t_struct(UD60x18)38741_storage))": {
            "label": "mapping(address => mapping(bytes32 => struct PRBMath.UD60x18))"
          },
          "t_mapping(t_bytes32,t_struct(UD60x18)38741_storage)": {
            "label": "mapping(bytes32 => struct PRBMath.UD60x18)"
          },
          "t_mapping(t_bytes32,t_struct(ClaimRecord)17689_storage)": {
            "label": "mapping(bytes32 => struct YOPRewards.ClaimRecord)"
          },
          "t_struct(ClaimRecord)17689_storage": {
            "label": "struct YOPRewards.ClaimRecord",
            "members": [
              {
                "label": "totalAvailable",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e22ab3c392d63681aa964eef6e8b69125152b230039866abb57c40c5abfa9372": {
      "address": "0x750c562C0a3147146D150f4c4142f7fa9d9E5afA",
      "txHash": "0xcebb9253b4476b9990c6a67018d62813110e6b8443581b2f7b1bd48dd915a946",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:53"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:55"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:57"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:59"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:61"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:63"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)19773_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:65"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:67"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:69"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:71"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:73"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Stake)19773_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)19773_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "c29c986ea7fd391b4dc0c4fe0a8373b9a512e4f7f416bccf174174ebfd4ad2b0": {
      "address": "0x337e9f17EC34E720fC800AA0266427663cdC0b67",
      "txHash": "0x320661f50b46a530c3d270622921308b39a3a988b1bb7d3c8ab0d9267c72a4fa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)3492_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "VaultDataStorage",
            "label": "vaultDecimals",
            "type": "t_uint8",
            "src": "contracts/vaults/VaultDataStorage.sol:14"
          },
          {
            "contract": "VaultDataStorage",
            "label": "emergencyShutdown",
            "type": "t_bool",
            "src": "contracts/vaults/VaultDataStorage.sol:15"
          },
          {
            "contract": "VaultDataStorage",
            "label": "activation",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:17"
          },
          {
            "contract": "VaultDataStorage",
            "label": "managementFee",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:18"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lockedProfitDegradation",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:22"
          },
          {
            "contract": "VaultDataStorage",
            "label": "depositLimit",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:23"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lastReport",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:25"
          },
          {
            "contract": "VaultDataStorage",
            "label": "lockedProfit",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:27"
          },
          {
            "contract": "VaultDataStorage",
            "label": "totalDebt",
            "type": "t_uint256",
            "src": "contracts/vaults/VaultDataStorage.sol:29"
          },
          {
            "contract": "VaultDataStorage",
            "label": "feeCollection",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:31"
          },
          {
            "contract": "VaultDataStorage",
            "label": "healthCheck",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:32"
          },
          {
            "contract": "VaultDataStorage",
            "label": "strategyDataStore",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:33"
          },
          {
            "contract": "VaultDataStorage",
            "label": "accessManager",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:34"
          },
          {
            "contract": "VaultDataStorage",
            "label": "creator",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:35"
          },
          {
            "contract": "VaultDataStorage",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)2715",
            "src": "contracts/vaults/VaultDataStorage.sol:37"
          },
          {
            "contract": "VaultDataStorage",
            "label": "strategies",
            "type": "t_mapping(t_address,t_struct(StrategyInfo)13750_storage)",
            "src": "contracts/vaults/VaultDataStorage.sol:38"
          },
          {
            "contract": "VaultDataStorage",
            "label": "vaultRewards",
            "type": "t_address",
            "src": "contracts/vaults/VaultDataStorage.sol:41"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)2715": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_struct(StrategyInfo)13750_storage)": {
            "label": "mapping(address => struct StrategyInfo)"
          },
          "t_struct(StrategyInfo)13750_storage": {
            "label": "struct StrategyInfo",
            "members": [
              {
                "label": "activation",
                "type": "t_uint256"
              },
              {
                "label": "lastReport",
                "type": "t_uint256"
              },
              {
                "label": "totalDebt",
                "type": "t_uint256"
              },
              {
                "label": "totalGain",
                "type": "t_uint256"
              },
              {
                "label": "totalLoss",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(Counter)3492_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)3492_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "0333bfd3b3acda5444a0872c2782ef81f63d1827b029432b27ebd87b6c7edbe8": {
      "address": "0x8F2EaEddF48D7e38c3F121c7d2F216c92FeD2Dfe",
      "txHash": "0x782fe9a15d878e8f1c2f5d8082f08bd54aa629db55060df29e09c5d7849d14eb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "GovernableInternal",
            "label": "governance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:20"
          },
          {
            "contract": "GovernableInternal",
            "label": "pendingGovernance",
            "type": "t_address",
            "src": "contracts/vaults/roles/Governable.sol:22"
          },
          {
            "contract": "Gatekeeperable",
            "label": "gatekeeper",
            "type": "t_address",
            "src": "contracts/vaults/roles/Gatekeeperable.sol:17"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Staking",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:53"
          },
          {
            "contract": "Staking",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:55"
          },
          {
            "contract": "Staking",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/staking/Staking.sol:57"
          },
          {
            "contract": "Staking",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:59"
          },
          {
            "contract": "Staking",
            "label": "minStakeAmount",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:61"
          },
          {
            "contract": "Staking",
            "label": "totalWorkingSupply",
            "type": "t_uint256",
            "src": "contracts/staking/Staking.sol:63"
          },
          {
            "contract": "Staking",
            "label": "stakes",
            "type": "t_array(t_struct(Stake)19773_storage)dyn_storage",
            "src": "contracts/staking/Staking.sol:65"
          },
          {
            "contract": "Staking",
            "label": "yopRewards",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:67"
          },
          {
            "contract": "Staking",
            "label": "accessControlManager",
            "type": "t_address",
            "src": "contracts/staking/Staking.sol:69"
          },
          {
            "contract": "Staking",
            "label": "stakesForAddress",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/staking/Staking.sol:71"
          },
          {
            "contract": "Staking",
            "label": "owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/staking/Staking.sol:73"
          },
          {
            "contract": "StakingV1Mock",
            "label": "token",
            "type": "t_address",
            "src": "contracts/mocks/StakingV1Mock.sol:8"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Stake)19773_storage)dyn_storage": {
            "label": "struct Staking.Stake[]"
          },
          "t_struct(Stake)19773_storage": {
            "label": "struct Staking.Stake",
            "members": [
              {
                "label": "lockPeriod",
                "type": "t_uint8"
              },
              {
                "label": "amount",
                "type": "t_uint248"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "lastTransferTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint248": {
            "label": "uint248"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    }
  }
}
